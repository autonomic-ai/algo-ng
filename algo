#!/usr/bin/env bash

TERRAFORM_VERSION="0.11.2"
SKIP_TAGS="_null encrypted"
SENSITIVE_PROMPT="[pasted values will not be displayed]"
TRUE="^(y|Y|true)$"
REGIONS_PATH="./regions"

describeRegions(){
  index=1
  while IFS="," read code name default; do
    printf "\n%2s. %-${ALGN:-5}s %s" $index "$code" "$name"
    ((index++))
  done < ${REGIONS_PATH}/${1}
}

getRegionCodeByIndex(){
  sed "${2}q;d" ${REGIONS_PATH}/${1} | cut -f1 -d,
}

getDefaultRegion(){
  index=1
  while IFS="," read code name default; do
    if [[ "$default" == "default" ]]; then
      default=${index}
      echo "$default"
      break
    fi
    ((index++))
  done < ${REGIONS_PATH}/${1}

}

askForRegion(){
  local default="$(getDefaultRegion ${ALGO_PROVIDER})"
  echo -e "\nWhat region should the server be located in?" \
    "\n$(describeRegions $1)" \
    "\nEnter the number of your desired region:"
  read -p "[${default}]: " -r region
  region=${region:-$default}
  TF_VAR_region="$(getRegionCodeByIndex "$1" $region)"
}

additional_roles () {

  if [[ "$ALGO_COMMAND" == "apply" ]]; then
    # OnDemand
    if [[ -z $OnDemandCellular ]]; then
      read -p "
      Do you want macOS/iOS clients to enable \"VPN On Demand\" when connected to cellular networks?
      [y/N]: " -r OnDemandCellular
    fi; [[ "$OnDemandCellular" =~ $TRUE ]] && OnDemandCellular=true || OnDemandCellular=false

    if [[ -z $OnDemandWiFi ]]; then
      read -p "
      Do you want macOS/iOS clients to enable \"VPN On Demand\" when connected to Wi-Fi?
      [y/N]: " -r OnDemandWiFi
    fi; [[ "$OnDemandWiFi" =~ $TRUE ]] && OnDemandWiFi=true || OnDemandWiFi=false

    if [[ -z $OnDemandWiFiExclude && $OnDemandWiFi =~ $TRUE ]]; then
      read -p "
      List the names of trusted Wi-Fi networks (if any) that macOS/iOS clients exclude from using the VPN
      (e.g., your home network. Comma-separated value, e.g., HomeNet,OfficeWifi,AlgoWiFi)
      : " -r OnDemandWiFiExclude
    fi
  fi

  TF_CLI_ARGS_apply+=" -var=ondemand='{ cellular = ${OnDemandCellular:-false},
                                        wifi  = ${OnDemandWiFi:-false},
                                        wifi_exclude = \"${OnDemandWiFiExclude}\"
                                      }'"
}

deploy () {
  export  TF_CLI_ARGS_apply+=" -auto-approve -parallelism=1"
  export  TF_CLI_ARGS_destroy="-force"
  export  TF_VAR_algo_name="${ALGO_SERVER_NAME}" \
          TF_VAR_algo_provider="${ALGO_PROVIDER}" \
          TF_VAR_region="$TF_VAR_region"

  ${TERRAFORM_BIN} workspace select ${ALGO_PROVIDER}-${TF_VAR_region}-${ALGO_SERVER_NAME} \
    || ${TERRAFORM_BIN} workspace new ${ALGO_PROVIDER}-${TF_VAR_region}-${ALGO_SERVER_NAME}
  ${TERRAFORM_BIN} init cloud/$ALGO_PROVIDER/
  ${TERRAFORM_BIN} ${ALGO_COMMAND:-apply} cloud/$ALGO_PROVIDER/
}

azure () {
  if [[ -z $ALGO_REGION ]]; then
    askForRegion ${ALGO_PROVIDER}
  else
    TF_VAR_region="$ALGO_REGION"
  fi

  export  ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID \
          ARM_CLIENT_ID=$ARM_CLIENT_ID \
          ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET \
          ARM_TENANT_ID=$ARM_TENANT_ID \
          ALGO_SERVER_NAME=${ALGO_SERVER_NAME}
}

digitalocean () {
  if [[ -z $DIGITALOCEAN_TOKEN ]]; then
    echo -e "\nEnter your API token. The token must have read and write permissions" \
            "(https://cloud.digitalocean.com/settings/api/tokens):" \
            "\n$SENSITIVE_PROMPT"
    read -p ": " -rs DIGITALOCEAN_TOKEN
  fi

  if [[ -z $ALGO_REGION ]]; then
    askForRegion ${ALGO_PROVIDER}
  else
    TF_VAR_region="$ALGO_REGION"
  fi

  export  DIGITALOCEAN_TOKEN=$DIGITALOCEAN_TOKEN \
          ALGO_SERVER_NAME=${ALGO_SERVER_NAME}
}

aws () {
  if [[ -z $AWS_ACCESS_KEY_ID && -z $AWS_PROFILE ]]; then
    echo -e "\nEnter your aws_access_key (http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html)" \
            "\nNote: Make sure to use an IAM user with an acceptable policy attached (see https://github.com/trailofbits/algo/blob/master/docs/deploy-from-terraform.md)." \
            "\n$SENSITIVE_PROMPT" \
            "\n[AKIA...]: "
    read -p ": " -rs AWS_ACCESS_KEY_ID
  fi

  if [[ -z $AWS_SECRET_ACCESS_KEY && -z $AWS_PROFILE ]]; then
    echo -e "\n\nEnter your aws_secret_key (http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html)" \
            "\n$SENSITIVE_PROMPT" \
            "\n[ABCD...]: "
    read -p ": " -rs AWS_SECRET_ACCESS_KEY
  fi

  if [[ -z $ALGO_REGION ]]; then
    ALGN=15 askForRegion ${ALGO_PROVIDER}
  else
    TF_VAR_region="$ALGO_REGION"
  fi

  export  AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
          AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
          ALGO_SERVER_NAME=${ALGO_SERVER_NAME}
}

gce () {
  if [[ -z $GOOGLE_CREDENTIALS ]]; then
    echo -e "\nEnter the local path to your credentials JSON file" \
            "(https://support.google.com/cloud/answer/6158849?hl=en&ref_topic=6262490#serviceaccounts)"
    read -p "[]: " -r GOOGLE_CREDENTIALS
  fi

  if [[ -z $ALGO_REGION ]]; then
    ALGN=25 askForRegion ${ALGO_PROVIDER}
  else
    TF_VAR_region="$ALGO_REGION"
  fi

  export  GOOGLE_CREDENTIALS=$GOOGLE_CREDENTIALS \
          TF_VAR_google_credentials=$GOOGLE_CREDENTIALS \
          ALGO_SERVER_NAME=${ALGO_SERVER_NAME}
}

non_cloud () {
  read -p "
  Enter the IP address of your server: (or use localhost for local installation)
  [localhost]: " -r server_ip
  server_ip=${server_ip:-localhost}

  read -p "

  What user should we use to login on the server? (note: passwordless login required, or ignore if you're deploying to localhost)
  [root]: " -r server_user
  server_user=${server_user:-root}

  if [ "x${server_ip}" = "xlocalhost" ]; then
  	myip=""
  else
  	myip=${server_ip}
  fi

  read -p "

  Enter the public IP address of your server: (IMPORTANT! This IP is used to verify the certificate)
  [$myip]: " -r IP_subject
  IP_subject=${IP_subject:-$myip}

  if [ "x${IP_subject}" = "x" ]; then
  	echo "no server IP given. exiting."
  	exit 1
  fi

  ROLES="local vpn"
  EXTRA_VARS="server_ip=$server_ip server_user=$server_user IP_subject_alt_name=$IP_subject"
  SKIP_TAGS+=" cloud update-alternatives"

  read -p "

  Was this server deployed by Algo previously?
  [y/N]: " -r Deployed_By_Algo
  Deployed_By_Algo=${Deployed_By_Algo:-n}
  if [[ "$Deployed_By_Algo" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" Deployed_By_Algo=Y"; fi

}

algo_provisioning () {
  if [[ -z $ALGO_PROVIDER ]]; then
    echo -e "\nWhat provider would you like to use?" \
            "\n 1. DigitalOcean" \
            "\n 2. Amazon EC2" \
            "\n 3. Microsoft Azure" \
            "\n 4. Google Compute Engine" \
            "\nEnter the number of your desired provider"
    read -p ": " -r ALGO_PROVIDER
  fi

  local default=algo
  if [[ -z $ALGO_SERVER_NAME ]]; then
    echo -e '\nName the vpn server:'
    read -p "[${default}]: " -r ALGO_SERVER_NAME
  fi
  export ALGO_SERVER_NAME=${ALGO_SERVER_NAME:-${default}}

  case "$ALGO_PROVIDER" in
    1|digitalocean) ALGO_PROVIDER=digitalocean; digitalocean; ;;
    lightsail) ALGO_PROVIDER=lightsail; aws; ;;
    # scaleway) ALGO_PROVIDER=scaleway; scaleway; ;;
    2|ec2) ALGO_PROVIDER=ec2; aws; ;;
    3|azure) ALGO_PROVIDER=azure; azure; ;;
    4|gce) ALGO_PROVIDER=gce; gce; ;;
    *) exit 1 ;;
  esac
}

help () {
  echo "Usage: $0 <command>

  The available commands for execution are listed below.

  Common commands:
      apply              Builds or changes infrastructure
      destroy            Destroy Terraform-managed infrastructure
  "
  exit 0
}

locate_terraform () {
  export TERRAFORM_BIN=$(which ./terraform || which terraform)
  if [[ "$TERRAFORM_BIN" == "" ]]; then
    echo "
    Terraform binary is not found.
    Please, read the readme and follow the instructions"
    exit 1
  fi
}

case "$1" in
  apply) export ALGO_COMMAND="apply" ;;
  destroy) export ALGO_COMMAND="destroy" ;;
  get-terraform) get_terraform ;;
  *) help "$@" ;;
esac

locate_terraform
algo_provisioning
additional_roles
deploy
